<%- exposeLocalsToBrowser() %>

<div class="container-fluid">

  <nav aria-label="breadcrumb">
    <ol class="breadcrumb">
      <li class="breadcrumb-item">
        <a href="<%= '/user/' + req.session.userId + '/dashboard' %>"> Dashboard </a>
      </li>
      <li class="breadcrumb-item">
        <a href="<%= '/sdtdserver/' + server.id + '/dashboard' %>">
          <%= server.name %>
        </a>
      </li>
      <li class="breadcrumb-item active" aria-current="page">Analytics</li>
    </ol>
  </nav>

  <h1>
    <%= server.name %> analytics</h1>

  <div id="narrow-down" class="form-group">

    <label for="datetimes">Select time range</label>
    <input type="text" class="form-control" name="datetimes" />

  </div>

  <div class="form-group">
    <label for="data-label">Type</label>
    <select class="form-control" name="data-label" id="data-label">
      <option value="fps">FPS</option>
      <option value="players">Players</option>
      <option value="heap">Heap (MB)</option>
      <option value="chunks">Chunks</option>
      <option value="zombies">Zombies</option>
      <option value="entities">Entities</option>
      <option value="items">Items</option>
      <option value="rss">Resident set size (MB)</option>
      <option value="uptime">Uptime</option>
    </select>
  </div>

  <div class="card">
    <div id="chart-stats" class="card-header">
      Chart
    </div>
    <div class="card-body">
      <h4 id="chart-analytics-stats" class="card-title"></h4>

      <p class="card-text">

        <canvas id="analytics-chart" width="100%"></canvas>

      </p>
    </div>
    <div id="chart-analytics-footer" class="card-footer text-muted">

      <i id="loading-indicator" class="fas fa-spinner fa-spin"></i> Loading
    </div>
  </div>

</div>

<script>
  $(document).ready(() => {
    const serverId = window.SAILS_LOCALS.server.id

    var analyticsChartCanvas = $("#analytics-chart");
    var limit = 100000
    var label;

    let beginningOfTime = new Date(0);
    let beginDate = beginningOfTime.valueOf();
    let endDate = Date.now();
    let data;

    let dateTimePicker

    initialize();

    $('input[name="datetimes"]').on('apply.daterangepicker', function (ev, picker) {
      beginDate = picker.startDate.toDate().valueOf();
      endDate = picker.endDate.toDate().valueOf();
      updateCharts();
    });

    $("#data-label").on('change', () => {
      updateCharts();
    })


    const minimum = array => Math.min(...array);
    const maximum = array => Math.max(...array);
    const average = array => array.reduce((a, b) => a + b, 0) / array.length;

    let getLimit = () => {
      let limit = $("#charts-limit").val();
      return parseInt(limit)
    }

    let getLabel = () => {
      let label = $("#data-label option:selected").val();
      return label
    }



    async function updateCharts() {
      $("#loading-indicator").show();
      label = getLabel();

      let dataToDraw = _.filter(data, dataPoint => {
        return beginDate < dataPoint.createdAt && dataPoint.createdAt < endDate
      });

      window.analyticsChart.data.datasets[0].data = dataToDraw.map(dataPoint => {
        return {
          t: dataPoint.createdAt,
          y: dataPoint[label]
        }
      })
      window.analyticsChart.data.datasets[0].label = label;
      window.analyticsChart.update();
      updateInfoLabels(dataToDraw);
    }


    async function getData() {
      return new Promise((resolve, reject) => {
        let opts = {
          serverId: serverId,
          limit: limit,
          beginDate: beginDate,
          endDate: endDate,
        }

        $.ajax({
          url: '/api/sdtdserver/data/memupdate/',
          type: 'GET',
          data: opts,
          success: function (data) {
            console.log(`Data length: ${data.length} - ${JSON.stringify(opts)}`)
            totalData = data;
            updateInfoLabels(data)
            resolve(data)
          },
          error: function (xhr, status, error) {
            displayAjaxToSupportData(xhr, this);;
            showErrorModal(`${error} - ${xhr.responseText}`, xhr);

            reject(data)
          }
        });


      })

    }

    function updateInfoLabels(data) {

      let date = new Date();
      $("#chart-analytics-footer").html(
        `<i class="fas fa-check"></i> ${data.length} data points`
      );

      if (data.length > 0) {

        let dataBeginDate = new Date(data[0].createdAt);
        let dataEndDate = new Date(data[data.length - 1].createdAt);
        $("#chart-analytics-stats").text(
          `${dataEndDate.toDateString()} ${dataEndDate.toLocaleTimeString()} - ${dataBeginDate.toDateString()} ${dataBeginDate.toLocaleTimeString()}`
        )
      }

      let reducedData = data.map(dataPoint => dataPoint[getLabel()])

      let min = minimum(reducedData);
      let max = maximum(reducedData);
      let avg = _.round(average(reducedData), 2);

      $("#chart-stats").text(`Minimum: ${min} - Maximum: ${max} - Average: ${avg}`);
      $("#loading-indicator").hide();

    }

    async function initialize() {
      data = await getData();
      label = getLabel();
      window.analyticsChart = new Chart(analyticsChartCanvas, {
        type: 'line',
        data: {
          datasets: [{
            fill: false,
            yAxisID: 'analytics',
            borderColor: 'rgb(0, 102, 255)',
            backgroundColor: 'rgb(0, 102, 255)',
            label: label,
            data: data.map(dataPoint => {
              return {
                t: dataPoint.createdAt,
                y: dataPoint[label]
              }
            }),
          }, ]
        },
        options: {
          scales: {
            yAxes: [{
              id: 'analytics',
              type: 'linear',
              ticks: {
                beginAtZero: true
              }
            }, ],
            xAxes: [{
              type: 'time',
            }]
          }
        }
      })
      dateTimePicker = $('input[name="datetimes"]').daterangepicker({
        timePicker: true,
        startDate: beginDate,
        endDate: endDate,
      });
    }



  })

</script>
