<div>
  <div class="row">
    <!-- Button trigger modal -->
    <button type="button" class="btn btn-primary btn" data-toggle="modal" data-target="#hooks-new-modal" style="margin: 1%">
      Add new hook
    </button>
  </div>
  <table class="table" id="hooks-table">
    <thead>
      <tr>
        <th>Event</th>
        <th>Commands to execute</th>
        <th>Search string</th>
        <th>Regex</th>
        <th>Cooldown</th>
        <th>Edit</th>
        <th>Delete</th>

      </tr>
    </thead>
    <tbody>

    </tbody>
  </table>


  <!-- Add hook Modal -->
  <div class="modal fade" id="hooks-new-modal" tabindex="-1" role="dialog" aria-labelledby="hooks-new-modal"
    aria-hidden="true">
    <div class="modal-dialog" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Add new hook</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body">
          <div class="form-group">
            <label for="hooks-new-event">Event</label>
            <input type="text" class="form-control" name="hooks-new-event" id="hooks-new-event" aria-describedby="hooks-new-event-help"
              placeholder="">
            <small id="hooks-new-event-help" class="form-text text-muted">Which event will trigger this hook.</small>
          </div>

          <div class="form-group">
            <label for="hooks-new-commands">Commands</label>
            <textarea class="form-control" name="hooks-new-commands" id="hooks-new-commands" aria-describedby="hooks-new-commands-help"
              placeholder="" rows="10"></textarea>
            <small id="hooks-new-commands-help" class="form-text text-muted">Which commands to execute when this hook
              is triggered.</small>
          </div>

          <label for="hooks-new-cooldown">Cooldown</label>
          <div class="input-group mb-3">
            <input type="text" class="form-control" name="hooks-new-cooldown" id="hooks-new-cooldown" aria-describedby="hooks-new-cooldown-help"
              placeholder="">
            <select class="form-control" name="hooks-new-cooldown-unit" id="hooks-new-cooldown-unit">
              <option value="ms">Ms</option>
              <option value="seconds">Seconds</option>
              <option value="minutes">Minutes</option>
              <option value="hours">Hours</option>
              <option value="days">Days</option>
            </select>
            <small id="hooks-new-cooldown-help" class="form-text text-muted"> When a hook is fired, it can only be
              fired again after the cooldown has ended. </small>
          </div>

          <div class="hooks-logLine-settings">
            <hr>

            <h6>Custom log line hooks</h6>

            <p>
              Other than the built-in events, you can also execute hooks for log lines with a certain string in them.
              To use this, select the event 'logLine'.
            </p>


            <div class="form-group">
              <label for="hooks-new-searchString">Search string</label>
              <input type="text" class="form-control" name="hooks-new-searchString" id="hooks-new-searchString"
                aria-describedby="hooks-new-searchString-help" placeholder="">
              <small id="hooks-new-searchString-help" class="form-text text-muted">The string to search for in a log
                line
                that will trigger this hook.</small>
            </div>

            <div class="form-group">
              <label for="hooks-new-regex">Regex</label>
              <input type="text" class="form-control" name="hooks-new-regex" id="hooks-new-regex" aria-describedby="hooks-new-regex-help"
                placeholder="">
              <small id="hooks-new-regex-help" class="form-text text-muted">Advanced! a <a href="https://en.wikipedia.org/wiki/Regular_expression"
                  target="_blank">regex</a> can also be used to test a log line for a match. </small>
            </div>
          </div>

        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
          <button type="button" id="hooks-new-submit" class="btn btn-primary">Save</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Edit hook Modal -->
  <div class="modal fade" id="hooks-edit-modal" tabindex="-1" role="dialog" aria-labelledby="hooks-edit-modal-help"
    aria-hidden="true">
    <div class="modal-dialog" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Edit hook</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body">
          <div class="form-group">
            <label for="hooks-edit-event">Event</label>
            <input type="text" class="form-control" name="hooks-edit-event" id="hooks-edit-event" aria-describedby="hooks-edit-event-help"
              placeholder="">
            <small id="hooks-edit-event-help" class="form-text text-muted">Which event will trigger this hook.</small>
          </div>

          <div class="form-group">
            <label for="hooks-edit-commands">Commands</label>
            <textarea class="form-control" name="hooks-edit-commands" id="hooks-edit-commands" aria-describedby="hooks-edit-commands-help"
              placeholder="" rows="10"></textarea>
            <small id="hooks-edit-commands-help" class="form-text text-muted">Which commands to execute when this
              hook
              is triggered.</small>
          </div>

          <label for="hooks-edit-cooldown">Cooldown</label>
          <div class="input-group mb-3">
            <input type="text" class="form-control" name="hooks-edit-cooldown" id="hooks-edit-cooldown"
              aria-describedby="hooks-edit-cooldown-help" placeholder="">
            <select class="form-control" name="hooks-edit-cooldown-unit" id="hooks-edit-cooldown-unit">
              <option value="ms">Ms</option>
              <option value="seconds">Seconds</option>
              <option value="minutes">Minutes</option>
              <option value="hours">Hours</option>
              <option value="days">Days</option>
            </select>
            <small id="hooks-edit-cooldown-help" class="form-text text-muted"> When a hook is fired, it can only be
              fired again after the cooldown has ended. </small>
          </div>

          <div class="hooks-logLine-settings">
            <hr>

            <h6>Custom log line hooks</h6>

            <p>
              Other than the built-in events, you can also execute hooks for log lines with a certain string in them.
              To use this, select the event 'logLine'.
            </p>

            <div class="form-group">
              <label for="hooks-edit-searchString">Search string</label>
              <input type="text" class="form-control" name="hooks-edit-searchString" id="hooks-edit-searchString"
                aria-describedby="hooks-edit-searchString-help" placeholder="">
              <small id="hooks-edit-searchString-help" class="form-text text-muted">The string to search for in a log
                line
                that will trigger this hook.</small>
            </div>

            <div class="form-group">
              <label for="hooks-edit-regex">Regex</label>
              <input type="text" class="form-control" name="hooks-edit-regex" id="hooks-edit-regex" aria-describedby="hooks-edit-regex-help"
                placeholder="">
              <small id="hooks-edit-regex-help" class="form-text text-muted">Advanced! a <a href="https://en.wikipedia.org/wiki/Regular_expression"
                  target="_blank">regex</a> can also be used to test a log line for a match. </small>
            </div>
          </div>

        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
          <button type="button" id="edit-hook-save" class="btn btn-primary">Save</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Delete hook Modal -->
  <div class="modal fade" id="hooks-delete-modal" tabindex="-1" role="dialog" aria-labelledby="hooks-delete-modal"
    aria-hidden="true">
    <div class="modal-dialog" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Are you sure?</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
          <button type="button" class="btn btn-danger" id="delete-hook-save">Yes</button>
        </div>
      </div>
    </div>
  </div>

</div>



<script>
  $(document).ready(() => {
    const secondsInMs = 1000;
    const minutesInMs = 60000;
    const hoursInMs = 3600000;
    const daysInMs = 86400000;

    const hooks = new Array();
    let activeHookId = undefined;

    const dataTable = $('#hooks-table').DataTable({
      autoWidth: false,
      dom: 'Bfrtip',
      fixedHeader: true,
      responsive: true,
      buttons: [

      ],
      columns: [{
          data: "event",
        },
        {
          data: 'commandsToExecute',
          width: '50%'
        },
        {
          data: "searchString",
        }, {
          data: "regex",
        },
        {
          data: 'cooldown',
          render: function (data, type, row, meta) {
            let string = `${row.cooldown} ms`
            // Set the cooldown select to the right unit
            if (!(row.cooldown % daysInMs)) {
              string = `${row.cooldown / daysInMs} days`
            }

            if (!(row.cooldown % hoursInMs)) {
              string = `${row.cooldown / hoursInMs} hours`
            }

            if (!(row.cooldown % minutesInMs)) {
              string = `${row.cooldown / minutesInMs} minutes`
            }

            if (!(row.cooldown % secondsInMs)) {
              string = `${row.cooldown / secondsInMs} seconds`
            }

            if (row.cooldown === 0) {
              string = '/'
            }

            return string;
          }
        },
        {
          render: function (data, type, row, meta) {
            return `<button type="button" class="btn btn-sm btn-primary" data-toggle="modal" data-target="#hooks-edit-modal" data-event="${row.event}" data-commands='${row.commandsToExecute.replace("'", "&apos")}' data-searchstring="${row.searchString}" data-hookid="${row.id}">Edit</button>`;
          }
        },
        {
          render: function (data, type, row, meta) {
            return `<button type="button" class="btn btn-sm btn-danger" data-toggle="modal" data-target="#hooks-delete-modal" data-hookid="${row.id}">Delete</button>`;
          }
        },
      ]
    });

    getHooks().then(data => {
      drawDataTable(data, dataTable);
    }).catch(error => {
      console.log(error);
      showErrorModal(`Error while loading custom hooks - ${error}`);
    })

    // Create new hook
    $("#hooks-new-submit").click(e => {
      let event = $("#hooks-new-event").val();
      let commandsToExec = $("#hooks-new-commands").val();
      let searchString = $("#hooks-new-searchString").val();
      let regex = $("#hooks-new-regex").val();
      let cooldown = $("#hooks-new-cooldown").val();
      let cooldownUnit = $("#hooks-new-cooldown-unit").val();

      switch (cooldownUnit) {
        case 'seconds':
          cooldown = cooldown * secondsInMs
          break;
        case 'minutes':
          cooldown = cooldown * minutesInMs
          break;
        case 'hours':
          cooldown = cooldown * hoursInMs
          break;
        case 'days':
          cooldown = cooldown * daysInMs
          break;
      }

      $.ajax({
        url: "/api/sdtdserver/hook",
        method: "POST",
        data: {
          commandsToExecute: commandsToExec,
          event: event,
          serverId: window.SAILS_LOCALS.server.id,
          searchString: searchString,
          regex: regex,
          cooldown: cooldown,
          _csrf: window.SAILS_LOCALS._csrf,
        },
        success: (data, status, xhr) => {
          dataTable.row.add(data);
          dataTable.draw();
          $('#hooks-new-modal').modal('hide');
        },
        error: function (xhr, status, error) {
          displayAjaxToSupportData(xhr, this);
          showErrorModal(`${error} - ${xhr.responseText}`, xhr);
        }
      })
    });

    // Fill relevant values in the edit hook modal when it is opened
    $('#hooks-edit-modal').on('show.bs.modal', function (event) {
      var button = $(event.relatedTarget);
      activeHookId = button.data('hookid')
      getHooks(activeHookId).then(data => {
        var modal = $(this);
        modal.find('#hooks-edit-event').val(data.event);
        modal.find('#hooks-edit-commands').val(data.commandsToExecute.replace('&apos', "'"));
        modal.find('#hooks-edit-searchString').val(data.searchString);
        modal.find('#hooks-edit-regex').val(data.regex);

        // Set the cooldown select to the right unit
        if (!(data.cooldown % secondsInMs)) {
          modal.find('#hooks-edit-cooldown').val(data.cooldown / secondsInMs);
          $("#hooks-edit-cooldown-unit").val("seconds");
        }

        if (!(data.cooldown % minutesInMs)) {
          modal.find('#hooks-edit-cooldown').val(data.cooldown / minutesInMs);
          $("#hooks-edit-cooldown-unit").val("minutes");
        }

        if (!(data.cooldown % hoursInMs)) {
          modal.find('#hooks-edit-cooldown').val(data.cooldown / hoursInMs);
          $("#hooks-edit-cooldown-unit").val("hours");
        }

        if (!(data.cooldown % daysInMs)) {
          modal.find('#hooks-edit-cooldown').val(data.cooldown / daysInMs);
          $("#hooks-edit-cooldown-unit").val("days");
        }


      }).catch(e => {
        console.log(e);
      })
    })

    $("#edit-hook-save").click(e => {
      e.preventDefault()
      let event = $("#hooks-edit-event").val();
      let commandsToExec = $("#hooks-edit-commands").val();
      let searchString = $("#hooks-edit-searchString").val();
      let regex = $("#hooks-edit-regex").val();
      let cooldown = $("#hooks-edit-cooldown").val();

      let cooldownUnit = $("#hooks-edit-cooldown-unit").val();

      switch (cooldownUnit) {
        case 'seconds':
          cooldown = cooldown * secondsInMs
          break;
        case 'minutes':
          cooldown = cooldown * minutesInMs
          break;
        case 'hours':
          cooldown = cooldown * hoursInMs
          break;
        case 'days':
          cooldown = cooldown * daysInMs
          break;
      }

      $.ajax({
        url: "/api/sdtdserver/hook",
        method: "PATCH",
        data: {
          commandsToExecute: commandsToExec,
          event: event,
          serverId: window.SAILS_LOCALS.server.id,
          hookId: activeHookId,
          serverId: window.SAILS_LOCALS.server.id,
          searchString: searchString,
          regex: regex,
          cooldown: cooldown,
          _csrf: window.SAILS_LOCALS._csrf,
        },
        success: (data, status, xhr) => {
          getHooks().then(data => {
            drawDataTable(data, dataTable);
          }).catch(error => {
            console.log(error);
            showErrorModal(`Error while loading custom hooks - ${error}`);
          });
          $('#hooks-edit-modal').modal('hide');
        },
        error: function (xhr, status, error) {
          displayAjaxToSupportData(xhr, this);
          showErrorModal(`${error} - ${xhr.responseText}`, xhr);
        }
      })
    });

    // Fill relevant values in the delete hook modal when it is opened
    $('#hooks-delete-modal').on('show.bs.modal', function (event) {
      var button = $(event.relatedTarget);
      activeHookId = button.data('hookid')
    });

    $("#delete-hook-save").click(e => {
      e.preventDefault()

      $.ajax({
        url: "/api/sdtdserver/hook",
        method: "DELETE",
        data: {
          hookId: activeHookId,
          serverId: window.SAILS_LOCALS.server.id,
          _csrf: window.SAILS_LOCALS._csrf,
          serverId: window.SAILS_LOCALS.server.id,
        },
        success: (data, status, xhr) => {
          getHooks().then(data => {
            drawDataTable(data, dataTable);
          }).catch(error => {
            console.log(error);
            showErrorModal(`Error while loading custom hooks - ${error}`);
          });
          $('#hooks-delete-modal').modal('hide');
        },
        error: function (xhr, status, error) {
          displayAjaxToSupportData(xhr, this);
          showErrorModal(`${error} - ${xhr.responseText}`, xhr);
        }
      })
    });

  });


  function getHooks(hookId) {
    return new Promise((resolve, reject) => {
      $.ajax({
        url: "/api/sdtdserver/hook",
        method: "GET",
        data: {
          serverId: window.SAILS_LOCALS.server.id,
          _csrf: window.SAILS_LOCALS._csrf,
          hookId: hookId,
        },
        success: (data, status, xhr) => {
          resolve(data);
        },
        error: function (xhr, status, error) {
          displayAjaxToSupportData(xhr, this);
          showErrorModal(`${error} - ${xhr.responseText}`, xhr);
          reject();
        }
      })
    })
  }

  function drawDataTable(data, table) {
    table.clear();
    for (const row of data) {
      table.row.add(row);
    }
    table.draw();

  }

</script>
