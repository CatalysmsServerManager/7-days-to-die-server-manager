<div>
  <div class="container">
    <p>Set jobs to run at certain intervals. You can execute any command you want. This function can be used for
      automatic
      restarts, periodic messages, daily events, ...</p>
    <% let currentDate = new Date(serverTime) %>
    <p>Please note that jobs run against CSMM server time, not your own timezone. Current server time is:
      <%= currentDate.toDateString() %>
      <%= currentDate.toTimeString() %>
    </p>

    <table id="cronjob-list" class="table">
      <thead>
        <tr>
          <th>Command</th>
          <th>Temporal value</th>
          <th>Enabled</th>
          <th>Notifications</th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody id="cronjob-list-body">

      </tbody>
    </table>

    <hr>

    <a name="export-cronsjobs" id="export-cronsjobs" class="btn btn-secondary" href="/api/sdtdserver/cron/export?serverId=<%= server.id %>"
      role="button">Export to file</a>

    <!-- Button trigger modal -->
    <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#cron-import-modal">
      Import
    </button>

    <!-- Modal -->
    <div class="modal fade" id="cron-import-modal" tabindex="-1" role="dialog" aria-labelledby="cron-import-modal-title"
      aria-hidden="true">
      <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h4 class="modal-title" id="cron-import-modal-title">Import</h4>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
              <span aria-hidden="true">&times;</span>
            </button>
          </div>
          <div class="modal-body">
            <div class="container-fluid">

              <div class="alert alert-warning" role="alert">
                Importing jobs is an advanced function. Check the documentation for more info
                <br> This will delete the current jobs you have. Make sure to include them in your import statement.
              </div>

              <div class="form-group">
                <label for="cron-import-json">Cron jobs JSON</label>
                <textarea class="form-control" name="cron-import-json" id="cron-import-json" rows="10"></textarea>
              </div>

              <div id="cron-import-problems" class="alert alert-warning invisible" role="alert">

              </div>

            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            <button id="cron-import-btn" type="button" class="btn btn-primary">Import</button>
          </div>
        </div>
      </div>
    </div>

    <!-- Button trigger modal -->
    <button type="button" class="btn btn-primary btn" data-toggle="modal" data-target="#add-new-cron-modal">
      <i class="fas fa-plus"></i> New
    </button>

    <!-- Modal -->
    <div class="modal fade" id="add-new-cron-modal" tabindex="-1" role="dialog" aria-labelledby="add-new-cron-modal-title"
      aria-hidden="true">
      <div class="modal-dialog" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h4 class="modal-title" id="add-new-cron-modal-title">Create new server automation rule</h4>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
              <span aria-hidden="true">&times;</span>
            </button>
          </div>
          <div class="modal-body">
            <div class="container-fluid">

              <div class="form-group">
                <label for="add-new-cron-command">Command</label>
                <textarea type="text" class="form-control" name="add-new-cron-command" id="add-new-cron-command"
                  aria-describedby="add-new-cron-command-help" placeholder="say 'Hello World'" rows="5"></textarea>
                <small id="add-new-cron-command-help" class="form-text text-muted">The command to execute every time
                  this job runs. Use ";" to separate multiple commands</small>
              </div>

              <div class="form-group">
                <label for="add-new-cron-temporalValue">Temporal value</label>
                <input type="text" class="form-control" name="add-new-cron-temporalValue" id="add-new-cron-temporalValue"
                  aria-describedby="add-new-cron-temporalValue-help" placeholder="30 * * * *">
                <small id="add-new-cron-temporalValue-help" class="form-text text-muted">A temporal value in cron
                  format. See the documentation for more info or use
                  <a href="https://crontab.guru/" target="_blank">Cron maker web tool</a>
                </small>
              </div>

              <hr>

              <em>Simple config</em>
              <small>For users who want less control over the job and just want to get it running easily. Note that
                your job will still use a temporal value in cron syntax</small>
              <br>

              <form class="form-inline">
                <div class="form-group">
                  <label for="add-new-cron-duration"> </label>
                  <input type="number" name="add-new-cron-duration" id="add-new-cron-duration" class="form-control"
                    placeholder="10" aria-describedby="add-new-cron-duration-help">
                  <small id="add-new-cron-duration-help" class="text-muted">How many units of time between. If you
                    select minutes this can be 5-59, if you select
                    hours this can be 1-24</small>
                </div>
              </form>

              <div class="form-group">
                <label for="add-new-cron-unit">Unit</label>
                <select class="form-control" name="add-new-cron-unit" id="add-new-cron-unit">
                  <option value="minutes">Minutes</option>
                  <option value="hours">Hours</option>
                </select>
              </div>

            </div>
          </div>
          <div class="modal-footer">
            <div id="add-new-cron-status"></div>
            <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            <button id="add-new-cron-submit" type="button" class="btn btn-primary">Submit</button>
          </div>
        </div>
      </div>
    </div>


  </div>

</div>


<script>
  $(document).ready(() => {

    $.ajax({
      url: '/api/sdtdserver/cron/list',
      method: 'GET',
      data: {
        serverId: window.SAILS_LOCALS.server.id,
      },
      error: function (xhr, status, error) {
        displayAjaxToSupportData(xhr, this);;
        showErrorModal(`${error} - ${xhr.responseText}`, xhr);
      },
      success: (data, xhr) => {
        data.forEach(job => {
          addNewJobToTable(job);
        })
      }
    })

    $("#cron-import-btn").click(e => {

      let json = $("#cron-import-json").val();

      $.ajax({
        url: "/api/sdtdserver/cron/import",
        method: "POST",
        data: {
          file: json,
          serverId: window.SAILS_LOCALS.server.id,
          _csrf: window.SAILS_LOCALS._csrf,
        },
        success: (data, status, xhr) => {
          location.reload();
        },
        error: function (xhr, status, error) {
          $("#cron-import-problems").removeClass('invisible');
          $("#cron-import-problems").empty();
          if (_.isArray(xhr.responseJSON)) {
            $("#cron-import-problems").text(xhr.responseJSON.join(" | "))
          } else {
            $("#cron-import-problems").text(xhr.responseJSON)
          }
        }
      })
    })

    $("#add-new-cron-submit").click((e) => {

      let command = $("#add-new-cron-command").val();
      let temporalValue = $('#add-new-cron-temporalValue').val();
      let statusDiv = $("#add-new-cron-status");
      let unit = $("#add-new-cron-unit").val()
      let duration = $("#add-new-cron-duration").val()

      let requestData = {
        _csrf: window.SAILS_LOCALS._csrf,
        serverId: window.SAILS_LOCALS.server.id,
        command: command,
      }

      if (temporalValue === "") {
        if (duration === "") {
          return statusDiv.text(`You must specify a temporal value OR use the simple config`)
        }

        if (unit === 'minutes') {
          requestData.minutes = duration
        }

        if (unit === "hours") {
          requestData.hours = duration
        }

      } else {
        requestData.temporalValue = temporalValue
      }



      statusDiv.text('');
      $.ajax({
        url: '/api/sdtdserver/cron',
        method: 'POST',
        data: requestData,
        error: function (xhr, status, error) {

          if (xhr.responseJSON) {
            if (xhr.responseJSON.problems) {
              xhr.responseJSON.problems.forEach(problem => {

                if (problem.includes("Value failed custom validation")) {
                  statusDiv.append(
                    "Make sure your temporal value is valid and has an interval of at least 5 minutes."
                  )
                } else {
                  statusDiv.append(problem)
                }

              })
            }
          } else {

            if (xhr.responseText.includes('Invalid command')) {
              statusDiv.text("Invalid command")
            }

            statusDiv.text(xhr.responseText);
          }
        },
        success: (data, status, xhr) => {
          statusDiv.text('Success!')
          addNewJobToTable(data)
        }
      })
    })



  })


  function deleteJobFromTable(rowElement) {
    $(rowElement).hide();
  }


  function addNewJobToTable(cronJob) {
    let tableElement = document.getElementById("cronjob-list");

    let newRow = tableElement.insertRow();

    let cellCommand = newRow.insertCell();
    let cellTemporalValue = newRow.insertCell();
    let cellEnabled = newRow.insertCell();
    let cellNotifications = newRow.insertCell();
    let cellDelete = newRow.insertCell();
    let cellTest = newRow.insertCell();
    let cellSave = newRow.insertCell();

    let commandText = `<p contenteditable="true">${cronJob.command}</p>`
    let temporalValueText = `<p contenteditable="true">${cronJob.temporalValue}</p>`

    let enabledToggle =
      `<input id="cronjob-enabled-checkbox-${cronJob.id}" value="${cronJob.id}" type="checkbox" ${cronJob.enabled ? "checked" : ""} >`;
    let notificationToggle =
      `<input id="cronjob-notifications-enabled-checkbox-${cronJob.id}" value="${cronJob.id}" type="checkbox" ${cronJob.notificationEnabled ? "checked" : ""} >`;
    let deleteButton = `<button type="button" class="btn btn-danger" value="${cronJob.id}">Delete</button>`;
    let testButton = `<button type="button" class="btn btn-primary" value="${cronJob.id}">Test</button>`;
    let saveButton = `<button type="button" class="btn btn-primary invisible" value="${cronJob.id}">Save</button>`;

    $(cellCommand).html(commandText);
    $(cellTemporalValue).html(temporalValueText);

    $(cellEnabled).html(enabledToggle);
    $(cellNotifications).html(notificationToggle);
    $(cellDelete).html(deleteButton);
    $(cellTest).html(testButton);
    $(cellSave).html(saveButton);

    $(cellCommand).on('input', (e) => {
      let changedItemId = e.target.dataset.itemid;
      $($(cellSave)[0].childNodes[0]).removeClass('invisible');
    });

    $(cellTemporalValue).on('input', (e) => {
      let changedItemId = e.target.dataset.itemid;
      $($(cellSave)[0].childNodes[0]).removeClass('invisible');
    });
    // Save button.
    // NICE SELECTOR BRO
    $($(cellSave)[0].childNodes[0]).on('click', e => {
      let changedJobId = $(e.target).val();
      let command = $(cellCommand).text();
      let temporalValue = $(cellTemporalValue).text()

      $.ajax({
        type: "PATCH",
        url: "/api/sdtdserver/cron",
        data: {
          _csrf: window.SAILS_LOCALS._csrf,
          serverId: window.SAILS_LOCALS.server.id,
          jobId: changedJobId,
          command: command,
          temporalValue: temporalValue
        },

        success: function (response) {
          $($(cellSave)[0].childNodes[0]).addClass('invisible');
        },
        error: function (xhr, status, error) {
          displayAjaxToSupportData(xhr, this);
          showErrorModal(`${error} - ${xhr.responseText}`, xhr);
        },
      });
    })

    $(cellTest).click(e => {
      let cronIdToDelete = e.target.getAttribute('value');

      $.ajax({
        url: '/api/sdtdserver/cron/test',
        method: 'POST',
        data: {
          _csrf: window.SAILS_LOCALS._csrf,
          serverId: window.SAILS_LOCALS.server.id,
          jobId: cronIdToDelete,
        },
        error: function (xhr, status, error) {
          displayAjaxToSupportData(xhr, this);
          showErrorModal(`${error} - ${xhr.responseText}`, xhr);
        },
        success: (data, status, xhr) => {
          alert(data)
        }
      })
    })

    $(cellNotifications).click(e => {
      let checkboxElement = $(`#cronjob-notifications-enabled-checkbox-${cronJob.id}`);
      let currentStatus = checkboxElement.prop('checked');

      if (!currentStatus) {
        $.ajax({
          url: '/api/sdtdserver/cron/notifications',
          method: 'DELETE',
          data: {
            _csrf: window.SAILS_LOCALS._csrf,
            serverId: window.SAILS_LOCALS.server.id,
            jobId: cronJob.id,
          },
          error: function (xhr, status, error) {
            displayAjaxToSupportData(xhr, this);
            showErrorModal(`${error} - ${xhr.responseText}`, xhr);
          },
          success: (data, status, xhr) => {}
        })
      } else {
        $.ajax({
          url: '/api/sdtdserver/cron/notifications',
          method: 'POST',
          data: {
            _csrf: window.SAILS_LOCALS._csrf,
            serverId: window.SAILS_LOCALS.server.id,
            jobId: cronJob.id,
          },
          error: function (xhr, status, error) {
            displayAjaxToSupportData(xhr, this);;
            showErrorModal(`${error} - ${xhr.responseText}`, xhr);
          },
          success: (data, status, xhr) => {}
        })
      }
    })

    $(cellEnabled).click(e => {
      let checkboxElement = $(`#cronjob-enabled-checkbox-${cronJob.id}`);
      let currentStatus = checkboxElement.prop('checked');

      if (!currentStatus) {
        $.ajax({
          url: '/api/sdtdserver/cron/status',
          method: 'DELETE',
          data: {
            _csrf: window.SAILS_LOCALS._csrf,
            serverId: window.SAILS_LOCALS.server.id,
            jobId: cronJob.id,
          },
          error: function (xhr, status, error) {
            displayAjaxToSupportData(xhr, this);;
            showErrorModal(`${error} - ${xhr.responseText}`, xhr);
          },
          success: (data, status, xhr) => {}
        })
      } else {
        $.ajax({
          url: '/api/sdtdserver/cron/status',
          method: 'POST',
          data: {
            _csrf: window.SAILS_LOCALS._csrf,
            serverId: window.SAILS_LOCALS.server.id,
            jobId: cronJob.id,
          },
          error: function (xhr, status, error) {
            displayAjaxToSupportData(xhr, this);;
            showErrorModal(`${error} - ${xhr.responseText}`, xhr);
          },
          success: (data, status, xhr) => {}
        })
      }

    })

    $(cellDelete).click(e => {
      let cronIdToDelete = e.target.getAttribute('value');

      $.ajax({
        url: '/api/sdtdserver/cron',
        method: 'DELETE',
        data: {
          _csrf: window.SAILS_LOCALS._csrf,
          serverId: window.SAILS_LOCALS.server.id,
          jobId: cronIdToDelete,
        },
        error: function (xhr, status, error) {
          displayAjaxToSupportData(xhr, this);;
          showErrorModal(`${error} - ${xhr.responseText}`, xhr);
        },
        success: (data, status, xhr) => {
          deleteJobFromTable(newRow)
        }
      })
    })



  }

</script>
