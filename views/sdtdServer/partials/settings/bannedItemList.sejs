<div>
  <p>
    This module allows you to specify a list of items that players are not
    allowed to have. Once a player is found with one of these items in their
    inventory, the command is executed to punish the player.
    <strong
      >Please note that this requires inventory tracking to be enabled</strong
    >
  </p>

  <div class="form-check">
    <label class="form-check-label">
      <input type="checkbox" class="form-check-input"
      name="banned-items-enabled" id="banned-items-enabled" value="true" <%=
      config.bannedItemsEnabled ? "checked" : "" %> /> Enabled
    </label>

    <div class="form-group">

      <div class="form-group">
        <label for="banned-items-tier">New tier</label>
        <select class="form-control" name="banned-items-tier" id="banned-items-tier">
          <% for(const role of roles){ %>
            <option data-id="<%= role.id %>"><%= role.name %></option>
          <% }%>
        </select>
        <small class="form-text text-muted">If a player has this role, they are allowed to carry the item. If their role level is higher, they will get punished</small>
        
        <label for="banned-items-command">Command</label>
        <input
          type="text"
          class="form-control"
          name="banned-items-command"
          id="banned-items-command"
          aria-describedby="banned-items-command-help"
          value='kick ${player.steamId} "Unauthorized item detected in inventory"'
        />
        <small id="banned-items-command-help" class="form-text text-muted"
          >The command to execute when a player is detected with a banned
          item</small
        >
      </div>

      <button
        type="button"
        id="create-tier"
        class="btn btn-primary"
      >
        Create tier
      </button>
    </div>

    <h3>Tiers</h3>

    <table class="table" id="bannedItemTiers">
      <thead>
        <tr>
          <th>Role name</th>
          <th>Command</th>
          <th>Delete</th>
        </tr>
      </thead>
      <tbody></tbody>
    </table>

    <h3>Banned items</h3>

    <table class="table" id="bannedItems">
      <thead>
        <tr>
          <th>Name</th>
          <th>Tier</th>
          <th>Delete</th>
        </tr>
      </thead>
      <tbody></tbody>
    </table>

    <span>
      <div class="form-group">
        <input
          type="text"
          class="form-control"
          name="bannedItems-new-item"
          id="bannedItems-new-item"
          aria-describedby="bannedItems-new-item-help"
          placeholder=""
        />
        <small id="bannedItems-new-item-help" class="form-text text-muted"
          >Item name to add to the list, this has to be exact!</small
        >

        <select class="form-control" name="banned-items-bannedItems-new-item-tier" id="banned-items-bannedItems-new-item-tier">

        </select>

      </div>
      <button type="button" id="bannedItems-add" class="btn btn-success">
        Add
      </button>
      <div id="possible-items"></div>
    </span>
  </div>
</div>

<script>
  $(document).ready(() => {
    let availableitems = [];
    getAvailableItems().then(data => {
      availableitems = data;
    });

    const bannedItemsTable = $("#bannedItems").DataTable({
      autoWidth: false,
      dom: "Bfrtip",
      fixedHeader: true,
      responsive: true,
      buttons: [],
      columns: [
        {
          data: "name"
        },
        {
          data: "tier.role.name"
        },
        {
          render: function(data, type, row, meta) {
            console.log(row);
            return `<button type="button" class="btn btn-sm btn-danger delete-item" data-itemname="${row.id}">Delete</button>`;
          }
        }
      ]
    });

    const bannedItemTiersTable = $("#bannedItemTiers").DataTable({
      autoWidth: false,
      dom: "Bfrtip",
      fixedHeader: true,
      responsive: true,
      buttons: [],
      columns: [
        {
          data: "role",
          render: function(data, type, row, meta) {
            if(data && data.name) return data.name;
            return "Deleted role";
          }
        },
        {
          data: "command"
        },
        {
          render: function(data, type, row, meta) {
            return `<button type="button" class="btn btn-sm btn-danger delete-item" data-tierid="${row.id}">Delete</button>`;
          }
        }
      ]
    });

    getBannedItems().then(data => drawItemsTable(data, bannedItemsTable));
    getTiers().then(data => drawTiersTable(data, bannedItemTiersTable));

    $("#create-tier").click(() => {
      const role = $('#banned-items-tier option:selected').data('id')
      const command = $("#banned-items-command").val();
      createTier({role,command});
    });

    $("#banned-items-enabled").click(() => {
      const checkbox = $("#banned-items-enabled");
      setStatus(checkbox.prop("checked"));
    });

    $("#bannedItems-add").click(async () => {
      const inputBox = $("#bannedItems-new-item");
      const tier = $('#banned-items-bannedItems-new-item-tier option:selected').val()
      await addNewItem(inputBox.val(), tier);
      getBannedItems().then(data => drawItemsTable(data, bannedItemsTable));
    });

    $("#bannedItems-new-item").on("input", () => {
      const inputBox = $("#bannedItems-new-item");
      const possibleItemsDiv = $("#possible-items");
      possibleItemsDiv.text(
        availableitems.filter(e =>
          e.toLowerCase().includes(inputBox.val().toLowerCase())
        )
      );
    });

    $("#bannedItems").on("click", ".delete-item", async e => {
      await removeItem($(e.target).attr("data-itemname"));
      getBannedItems().then(data => drawItemsTable(data, bannedItemsTable));
    });


    $("#bannedItemTiers").on("click", ".delete-item", async e => {
      await removeTier($(e.target).attr("data-tierId"));
      getTiers().then(data => drawTiersTable(data, bannedItemTiersTable));
    });

    function createTier(tier) {
      return new Promise((resolve, reject) => {
        $.ajax({
          url: "/api/sdtdserver/bannedItems/tier",
          method: "POST",
          data: {
            serverId: window.SAILS_LOCALS.server.id,
            _csrf: window.SAILS_LOCALS._csrf,
            command: tier.command,
            role: tier.role,
          },
          success: (data, status, xhr) => {
            resolve(data);
            getTiers().then(data => drawTiersTable(data, bannedItemTiersTable));
          },
          error: function(xhr, status, error) {
            displayAjaxToSupportData(xhr, this);
            showErrorModal(`${error} - ${xhr.responseText}`, xhr);
            reject();
          }
        });
      });
    }

    function removeItem(bannedItem) {
      return new Promise((resolve, reject) => {
        $.ajax({
          url: "/api/sdtdserver/bannedItems/item",
          method: "DELETE",
          data: {
            serverId: window.SAILS_LOCALS.server.id,
            _csrf: window.SAILS_LOCALS._csrf,
            bannedItem: bannedItem
          },
          success: (data, status, xhr) => {
            resolve(data);
          },
          error: function(xhr, status, error) {
            displayAjaxToSupportData(xhr, this);
            showErrorModal(`${error} - ${xhr.responseText}`, xhr);
            reject();
          }
        });
      });
    }

    function removeTier(tier) {
      return new Promise((resolve, reject) => {
        $.ajax({
          url: "/api/sdtdserver/bannedItems/tier",
          method: "DELETE",
          data: {
            serverId: window.SAILS_LOCALS.server.id,
            _csrf: window.SAILS_LOCALS._csrf,
            tierId: tier
          },
          success: (data, status, xhr) => {
            resolve(data);
          },
          error: function(xhr, status, error) {
            displayAjaxToSupportData(xhr, this);
            showErrorModal(`${error} - ${xhr.responseText}`, xhr);
            reject();
          }
        });
      });
    }


    function addNewItem(bannedItem, tier) {
      return new Promise((resolve, reject) => {
        $.ajax({
          url: "/api/sdtdserver/bannedItems/item",
          method: "POST",
          data: {
            serverId: window.SAILS_LOCALS.server.id,
            _csrf: window.SAILS_LOCALS._csrf,
            name: bannedItem,
            tier: tier
          },
          success: (data, status, xhr) => {
            resolve(data);
          },
          error: function(xhr, status, error) {
            displayAjaxToSupportData(xhr, this);
            showErrorModal(`${error} - ${xhr.responseText}`, xhr);
            reject();
          }
        });
      });
    }

    function drawItemsTable(data, table) {
      table.clear();
      if (!_.isNull(data)) {
        for (const row of data) {
          table.row.add(row);
        }
      }
      table.draw();
    }

    function drawTiersTable(data, table) {

      const tierSelect = $("#banned-items-bannedItems-new-item-tier");
      tierSelect.empty()
      for (const row of data) {
        if (!row.role) continue;
        tierSelect.append($("<option />").text(row.role.name).val(row.id));
      }

      table.clear();
      if (!_.isNull(data)) {
        for (const row of data) {
          table.row.add(row);
        }
      }
      table.draw();
    }

    function setStatus(status) {
      return new Promise((resolve, reject) => {
        $.ajax({
          url: "/api/sdtdserver/bannedItems/status",
          method: "POST",
          data: {
            serverId: window.SAILS_LOCALS.server.id,
            _csrf: window.SAILS_LOCALS._csrf,
            status: status
          },
          success: (data, status, xhr) => {
            resolve(data);
          },
          error: function(xhr, status, error) {
            displayAjaxToSupportData(xhr, this);
            showErrorModal(`${error} - ${xhr.responseText}`, xhr);
            reject();
          }
        });
      });
    }

    function getBannedItems() {
      return new Promise((resolve, reject) => {
        $.ajax({
          url: "/api/sdtdserver/bannedItems",
          method: "GET",
          data: {
            serverId: window.SAILS_LOCALS.server.id
          },
          success: (data, status, xhr) => {
            resolve(data);
          },
          error: function(xhr, status, error) {
            displayAjaxToSupportData(xhr, this);
            showErrorModal(`${error} - ${xhr.responseText}`, xhr);
            reject();
          }
        });
      });
    }

    function getTiers() {
      return new Promise((resolve, reject) => {
        $.ajax({
          url: "/api/sdtdserver/bannedItems/tier",
          method: "GET",
          data: {
            serverId: window.SAILS_LOCALS.server.id
          },
          success: (data, status, xhr) => {
            resolve(data);
          },
          error: function(xhr, status, error) {
            displayAjaxToSupportData(xhr, this);
            showErrorModal(`${error} - ${xhr.responseText}`, xhr);
            reject();
          }
        });
      });
    }

    function getAvailableItems() {
      return new Promise((resolve, reject) => {
        $.ajax({
          url: `/api/sdtdserver/availableitems`,
          data: {
            serverId: window.SAILS_LOCALS.server.id,
            item: "*"
          },
          success: (data, status, xhr) => {
            resolve(data);
          },
          error: function(xhr, status, error) {
            displayAjaxToSupportData(xhr, this);
            showErrorModal(`${error} - ${xhr.responseText}`, xhr);
          }
        });
      });
    }
  });
</script>
