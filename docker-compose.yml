# This is an example on how to run CSMM with Docker compose.
# This is **not** a production ready deployment template, you must configure a web server, security, ... yourself
version: "3.7"

services:
  csmm-web:
    build: .
    #image: catalysm/csmm
    depends_on:
      - cache
      - db
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      REDISSTRING: "redis://cache:6379"
      DBSTRING: "mysql2://csmm:mysecretpasswordissosecure@db:3306/csmm"
      CSMM_HOSTNAME: "http://localhost:30005"
      API_KEY_STEAM: ""
      DISCORDBOTTOKEN: ""
      DISCORDCLIENTSECRET: ""
      DISCORDCLIENTID: ""
      CSMM_ADMINS: ""
    ports:
      - 127.0.0.1:30005:1337
    restart: unless-stopped
    entrypoint: ["npm", "run", "start:app"]
  csmm-worker:
    build: .
    #image: catalysm/csmm
    depends_on:
      - cache
      - db
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      REDISSTRING: "redis://cache:6379"
      DBSTRING: "mysql2://csmm:mysecretpasswordissosecure@db:3306/csmm"
    ports:
      - 127.0.0.1:30005:1337
    healthcheck:
      disable: true
    restart: unless-stopped
    entrypoint: ["npm", "run", "start:worker"]

  cache:
    image: redis
    volumes:
      - ./redis-data:/data
    command: ["redis-server", "--appendonly", "yes"]
    restart: unless-stopped
  db:
    image: mariadb
    volumes:
      - ./db-data:/var/lib/mysql
    environment:
      MYSQL_DATABASE: "csmm"
      MYSQL_USER: "csmm"
      MYSQL_PASSWORD: "mysecretpasswordissosecure"
      MYSQL_RANDOM_ROOT_PASSWORD: "true"
    restart: unless-stopped
