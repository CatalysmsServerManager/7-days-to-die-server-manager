# This is an example on how to run CSMM with Docker compose.
# This is **not** a production ready deployment template, you must configure a web server, security, ... yourself
version: "3.7"

services:
  csmm-web:
    build: .
    #image: catalysm/csmm
    depends_on:
      - cache
      - db
    environment:
      NODE_ENV: "production"
    env_file: .env
    ports:
      - 1337:1337
    restart: unless-stopped
    entrypoint: ["npm", "run", "start:app"]
  csmm-worker:
    build: .
    #image: catalysm/csmm
    depends_on:
      - cache
      - db
    environment:
      NODE_ENV: "production"
    env_file: .env
    healthcheck:
      disable: true
    restart: unless-stopped
    entrypoint: ["npm", "run", "start:worker"]

  csmm-migrations:
    build: .
    #image: catalysm/csmm
    depends_on:
      - db
    environment:
      NODE_ENV: "production"
    env_file: .env
    healthcheck:
      disable: true
    entrypoint: ["sh", "-c", "npm run wait-for:db && npm run db:migrate"]

  cache:
    image: redis
    volumes:
      - ./redis-data:/data
    command: ["redis-server", "--appendonly", "yes"]
    restart: unless-stopped

  db:
    image: mariadb
    volumes:
      - ./db-data:/var/lib/mysql
    env_file: .env
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
